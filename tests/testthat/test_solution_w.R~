## c:/Dropbox/Rpackages/SynthHelpers/tests/testthat/test_solution_w.R

##    Chandler Lutz
##    Questions/comments: cl.eco@cbs.dk
##    $Revisions:      1.0.0     $Date:  2016-11-21

##To test solution_w and make sure it outputs similar data
##as Synth

library(kernlab); library(Rcpp); library(RcppArmadillo); library(microbenchmark)

sourceCpp("../../src/SynthCpp_functions.cpp")

##load some data from a synth example to check that everything is okay
solution.v <- readRDS("../../data-raw/solution_v_forc_example.rds")[[1]]
X.scaled <- readRDS("../../data-raw/X_forc_example.rds")

X0.scaled <- X.scaled[, 2:ncol(X.scaled), drop = FALSE]
X1.scaled <- X.scaled[, 1, drop = FALSE]
##Z <- readRDS("../../data/Z_forc_example.rds")

f.reg.synth <- function(solution.v, X0.scaled, X1.scaled) {
    ##Synth implementation
    nvarsV <- length(solution.v)

    ##Now that we have V, Solve the linear quadratic programming problem
    ##and get the weights
    V <- diag(x = as.numeric(solution.v), nrow = nvarsV, ncol = nvarsV)

    ##t(X0.scaled) %*% V %*% (X0.scaled)
    ##H <- t(self$X.scaled[,temp.control.ids]) %*% V %*% (self$X.scaled[,temp.control.ids])
    ##Use crossprod to speed things up
    H <- crossprod(X0.scaled,V) %*% X0.scaled
    ##X1.scaled
    a <- X1.scaled

    ##-1 * c(t(a) %*% V %*% (X0.scaled))
    ##which equals
    ##-1 * c(t(X1.scaled) %*% V %*% (X0.scaled))
    c <- -1 * c( crossprod(X1.scaled, V) %*% X0.scaled)

    A <- t(rep(1, length(c)))
    b <- 1
    l <- rep(0, length(c))
    u <- rep(1, length(c))
    r <- 0

    res <- ipop(c = c, H = H, A = A, b = b, l = l, u = u,
                r = r, bound = 10, margin = 5e-04,
                maxiter = 1000, sigf = 5)

    solution.w <- as.matrix(primal(res))  ##row vector
    return(solution.w)
}

##from the rcpp

test_that("solution_w_cpp() produces the same results as the original Synth Code", {
    expect_equal(f.reg.synth(solution.v, X0.scaled, X1.scaled),
                 solution_w_cpp(as.matrix(solution.v), X0.scaled, X1.scaled))
})

microbenchmark(
    f.reg.synth(solution.v, X0.scaled, X1.scaled),
    solution_w_cpp(as.matrix(solution.v), X0.scaled, X1.scaled)
)


